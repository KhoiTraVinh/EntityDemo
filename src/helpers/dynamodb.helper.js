'use strict'

const {
    ListTablesCommand,
    CreateTableCommand,
    PutItemCommand,
    ScanCommand,
    UpdateItemCommand,
    GetItemCommand
} = require("@aws-sdk/client-dynamodb");
const DynamoDBSingleton = require("../dbs/init.dynamodb");

const createIfNotExist = async (tableName, keySchema, attributeDefinitions) => {
    try {
        // Ki·ªÉm tra b·∫£ng ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingTables = await DynamoDBSingleton.send(new ListTablesCommand({}));
        if (existingTables.TableNames.includes(tableName)) {
            console.log(`‚úÖ Table "${tableName}" already exists.`);
            return;
        }

        // N·∫øu ch∆∞a c√≥, t·∫°o b·∫£ng m·ªõi
        const params = {
            TableName: tableName,
            KeySchema: keySchema,
            AttributeDefinitions: attributeDefinitions,
            ProvisionedThroughput: { ReadCapacityUnits: 1, WriteCapacityUnits: 1 }, // Mi·ªÖn ph√≠ tr√™n Local
        };

        const command = new CreateTableCommand(params);
        await DynamoDBSingleton.send(command);
        console.log(`üöÄ Table "${tableName}" created successfully!`);
    } catch (err) {
        console.error(`‚ùå Error creating table "${tableName}":`, err);
    }
};

// üõ†Ô∏è T·∫°o b·∫£ng CustomerMaster
const createCustomerMasterTable = async () => {
    await createIfNotExist(
        "CustomerMaster",
        [{ AttributeName: "EmailAddress", KeyType: "HASH" }], // Primary Key
        [
            { AttributeName: "EmailAddress", AttributeType: "S" }, // varchar50 (PK)
        ]
    );
};

// üõ†Ô∏è T·∫°o b·∫£ng PasswordHistory
const createPasswordHistoryTable = async () => {
    await createIfNotExist(
        "PasswordHistory",
        [
            { AttributeName: "SequenceNumber", KeyType: "HASH" }, // PK
            { AttributeName: "EmailAddress", KeyType: "RANGE" }, // Sort Key
        ],
        [
            { AttributeName: "SequenceNumber", AttributeType: "N" }, // TƒÉng d·∫ßn (Number)
            { AttributeName: "EmailAddress", AttributeType: "S" }, // varchar50 (Kh√≥a ngo·∫°i CustomerMaster)
        ]
    );
};

// Ch·∫°y t·∫°o b·∫£ng
const initTables = async () => {
    await createCustomerMasterTable();
    await createPasswordHistoryTable();
};

const insertData = async (tableName, data) => {
    try {
        // Chuy·ªÉn object th√†nh ƒë·ªãnh d·∫°ng DynamoDB
        const formattedData = Object.entries(data).reduce((acc, [key, value]) => {
            acc[key] = typeof value === "number" ? { N: value.toString() } : { S: value };
            return acc;
        }, {});

        const params = {
            TableName: tableName,
            Item: formattedData,
        };

        await DynamoDBSingleton.send(new PutItemCommand(params));
        console.log(`‚úÖ Inserted into "${tableName}":`, data);
    } catch (err) {
        console.error(`‚ùå Error inserting into "${tableName}":`, err);
    }
};

// üõ†Ô∏è H√†m l·∫•y to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng
const getAllByTableName = async (tableName) => {
    try {
        const command = new ScanCommand({ TableName: tableName });
        const response = await DynamoDBSingleton.send(command);
        console.log(`üìå Data from ${tableName}:`, JSON.stringify(response.Items, null, 2));
    } catch (err) {
        console.error(`‚ùå Error scanning table ${tableName}:`, err);
    }
};

// üõ†Ô∏è H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë·ªông trong DynamoDB
const updateData = async (tableName, key, updates) => {
    try {
        // Validate d·ªØ li·ªáu tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        const validatedUpdates = validateData(tableName, { ...key, ...updates });
        // Chuy·ªÉn key th√†nh ƒë·ªãnh d·∫°ng DynamoDB
        const keyFormatted = Object.entries(key).reduce((acc, [k, v]) => {
            acc[k] = typeof v === "number" ? { N: v.toString() } : { S: v };
            return acc;
        }, {});

        // Chuy·ªÉn updates th√†nh ƒë·ªãnh d·∫°ng Expression Attribute Values
        const updateExpressions = [];
        const expressionAttributeValues = {};
        for (const [field, value] of Object.entries(validatedUpdates)) {
            updateExpressions.push(`${field} = :${field}`);
            expressionAttributeValues[`:${field}`] = typeof value === "number" ? { N: value.toString() } : { S: value };
        }

        const params = {
            TableName: tableName,
            Key: keyFormatted,
            UpdateExpression: `SET ${updateExpressions.join(", ")}`,
            ExpressionAttributeValues: expressionAttributeValues,
        };

        await DynamoDBSingleton.send(new UpdateItemCommand(params));
        console.log(`‚úÖ Updated "${tableName}" where ${JSON.stringify(key)} with ${JSON.stringify(validatedUpdates)}`);
    } catch (err) {
        console.error(`‚ùå Error updating "${tableName}":`, err);
    }
};

// üõ†Ô∏è H√†m ki·ªÉm tra xem Email ho·∫∑c PhoneNumber c√≥ t·ªìn t·∫°i hay kh√¥ng
const checkExistence = async (tableName, key) => {
    try {
        // Chuy·ªÉn key th√†nh ƒë·ªãnh d·∫°ng DynamoDB
        const keyFormatted = Object.entries(key).reduce((acc, [k, v]) => {
            acc[k] = typeof v === "number" ? { N: v.toString() } : { S: v };
            return acc;
        }, {});

        const params = {
            TableName: tableName,
            Key: keyFormatted,
        };

        const result = await DynamoDBSingleton.send(new GetItemCommand(params));
        return result.Item ? true : false; // N·∫øu c√≥ Item th√¨ t·ªìn t·∫°i, ng∆∞·ª£c l·∫°i th√¨ ch∆∞a
    } catch (err) {
        console.error(`‚ùå Error checking existence in "${tableName}":`, err.message);
        return false;
    }
};


module.exports = {
    initTables,
    insertData,
    getAllByTableName,
    updateData,
    checkExistence
}